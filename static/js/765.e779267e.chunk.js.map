{"version":3,"file":"static/js/765.e779267e.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.jsx","redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/ContactItem/ContactItem.styled.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","pages/Contacts.js"],"sourcesContent":["import styled from 'styled-components';\nimport { Form, Field } from 'formik';\n\nexport const ContForm = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  width: 300px;\n  margin-bottom: 50px;\n  padding: 25px;\n  background-color: #00e5ff;\n  box-shadow: 0 0 10px #c6cccced;\n  border-radius: 5px;\n`;\n\nexport const Button = styled.button`\nwidth: 100px;\nmargin-left: auto;\nmargin-right: auto;\ncursor: pointer;\nborder: none;\npadding: 5px;\nborder-radius: 5px;\nbackground-color: white;\n\n:hover {\n    color: white;\n    background-color: blue;\n    box-shadow: 0 0 10px #c6cccced;\n}\n`;\n\nexport const Input = styled(Field)`\nborder: none;\npadding: 5px;\nborder-radius: 5px;\nbackground-color: white;\noutline: none;\n\n:hover {\n    box-shadow: 0 0 10px #c6cccced;\n}\n\n:focus {\n    box-shadow: 0 0 10px #c6cccced;\n    border: 1px solid blue;\n}\n`;\n","export const getContacts = state => state.contacts.items;\nexport const getIsLoading = state => state.contacts.isLoading;\nexport const getError = state => state.contacts.error;\nexport const getFilter = state => state.filter;","import React from 'react';\nimport { ContForm, Button, Input } from './ContactForm.styled';\nimport { Formik, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport { Toaster, toast } from 'react-hot-toast';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\n\nconst initialValues = {\n        name: '',\n        number: '',\n}\n    \nconst FormSchema = yup.object().shape({\n  name: yup.string().min(2).required(),\n  number: yup.string().min(7).max(14).required(),\n});\n\n  \nexport const ContactForm = () => {\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const handleSubmit = (values, { resetForm }) => {\n    const isExist = contacts.map(contact => contact.name);\n    \n      if (isExist.includes(values.name)) {\n        alert(`${values.name} is already in contacts`)\n        return\n      }\n    dispatch(addContact(values));\n    toast.success('New contact successfully added');\n    resetForm();\n  }\n    \n    return (\n            <Formik initialValues={initialValues} onSubmit={handleSubmit} validationSchema={FormSchema}>\n            <ContForm>\n                <label htmlFor='name'>Name</label>\n                <ErrorMessage name=\"name\" />\n                    <Input\n                     type=\"text\"\n                     name=\"name\"\n                     pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                     title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                     required\n                        />\n                    \n                <label htmlFor='number'>Number</label>\n                <ErrorMessage name=\"number\" />\n                    <Input\n                     type=\"tel\"\n                     name=\"number\"\n                     pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                     title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                     required\n                        />\n                      <div> \n                <Button type=\"submit\" >Add contact</Button>\n                    <Toaster />\n                    </div> \n                </ContForm>\n                </Formik>\n    )\n    \n    }\n\n","import styled from 'styled-components';\n\nexport const Item = styled.li`\n  font-size: 18px;\n  font-weight: 500;\n  margin-bottom: 10px;\n  display: flex;\n  align-items: center;\n`;\n\nexport const Button = styled.button`\nmargin-left: 10px;\nwidth: 60px;\ncursor: pointer;\nborder: none;\npadding: 3px;\nborder-radius: 5px;\nbackground-color: #00e5ff;\n\n:hover {\n    color: white;\n    background-color: blue;\n    box-shadow: 0 0 10px #c6cccced;\n}\n`;","import PropTypes from 'prop-types';\nimport { Item, Button } from './ContactItem.styled';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\n\nexport const ContactItem = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n    return (\n        <Item key={id}>{name}: {number} <Button type=\"button\" onClick={() => dispatch(deleteContact(id))}>Delete</Button></Item>\n    )\n}\n\nContactItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n}\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\nlist-style: none;\npadding: 0\n`;","import { ContactItem } from \"components/ContactItem/ContactItem\";\nimport { List } from './ContactList.styled';\nimport { useSelector } from 'react-redux';\nimport { getContacts, getFilter } from 'redux/contacts/selectors';\n\nexport const ContactList = () => {\n        const contacts = useSelector(getContacts);\n        const filterContacts = useSelector(getFilter);\n        const contactsList = contacts.filter(contact => contact.name.toLowerCase().includes(filterContacts.toLowerCase()));\n\n    return (\n        <List>\n        {contactsList.map(({ id, name, number }) => {\n                return (\n            <ContactItem key={id} id={id} name={name} number={number} />\n            )\n            })}\n                </List>\n    )\n}\n\n","import styled from 'styled-components';\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n`;\n\nexport const Input = styled.input`\nborder: 1px solid blue;\npadding: 5px;\nborder-radius: 5px;\nbackground-color: white;\noutline: none;\n\n:hover {\n    box-shadow: 0 0 10px #c6cccced;\n}\n`;","\nimport { Label, Input } from './Filter.styled';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getFilter } from 'redux/contacts/selectors';\nimport { setFilter } from 'redux/contacts/filterSlice';\n\nexport const Filter = () => {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n  const onChange = event => {\n    dispatch(setFilter(event.target.value))\n  }\n    return (\n        <Label>Find contacts by name\n        <Input type=\"text\" name=\"filter\" value={filter} onChange={onChange}/>\n    </Label>\n    )\n}\n\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { getIsLoading } from 'redux/contacts/selectors';\nimport { Filter } from 'components/Filter/Filter';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <h1>Your contacts</h1>\n      <ContactForm />\n      <Filter />\n      <div>{isLoading && 'Request in progress...'}</div>\n      <ContactList />\n    </>\n  );\n}"],"names":["ContForm","styled","Form","Button","Input","Field","getContacts","state","contacts","items","getIsLoading","isLoading","getFilter","filter","initialValues","name","number","FormSchema","yup","shape","min","required","max","ContactForm","useSelector","dispatch","useDispatch","onSubmit","values","resetForm","map","contact","includes","alert","addContact","toast","validationSchema","htmlFor","type","pattern","title","Item","ContactItem","id","onClick","deleteContact","List","ContactList","filterContacts","contactsList","toLowerCase","Label","Filter","value","onChange","event","setFilter","target","Contacts","useEffect","fetchContacts"],"sourceRoot":""}