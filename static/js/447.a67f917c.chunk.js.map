{"version":3,"file":"static/js/447.a67f917c.chunk.js","mappings":"0OAAaA,EAAc,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAnB,EACnBC,EAAe,SAAAH,GAAK,OAAIA,EAAMC,SAASG,SAAnB,EAEpBC,EAAY,SAAAL,GAAK,OAAIA,EAAMM,MAAV,E,mBCKxBC,EAAgB,CACdC,KAAM,GACNC,OAAQ,IAGVC,EAAaC,EAAAA,KAAaC,MAAM,CACpCJ,KAAMG,EAAAA,KAAaE,IAAI,GAAGC,WAC1BL,OAAQE,EAAAA,KAAaE,IAAI,GAAGE,IAAI,IAAID,aAIzBE,EAAc,WACzB,IAAMf,GAAWgB,EAAAA,EAAAA,IAAYlB,GACvBmB,GAAWC,EAAAA,EAAAA,MAcf,OACQ,SAAC,KAAD,CAAQZ,cAAeA,EAAea,SAb3B,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UACdrB,EAASsB,KAAI,SAAAC,GAAO,OAAIA,EAAQhB,IAAZ,IAEtBiB,SAASJ,EAAOb,MAC1BkB,MAAM,GAAD,OAAIL,EAAOb,KAAX,6BAGTU,GAASS,EAAAA,EAAAA,IAAWN,IACpBO,EAAAA,GAAAA,QAAc,kCACdN,IACD,EAGuEO,iBAAkBnB,EAAhF,UACA,6BACI,kBAAOoB,QAAQ,OAAf,mBACA,SAAC,KAAD,CAActB,KAAK,UACf,kBACCuB,KAAK,OACLvB,KAAK,OACLwB,QAAQ,yHACRC,MAAM,yIACNnB,UAAQ,KAGb,kBAAOgB,QAAQ,SAAf,qBACA,SAAC,KAAD,CAActB,KAAK,YACf,kBACCuB,KAAK,MACLvB,KAAK,SACLwB,QAAQ,yFACRC,MAAM,+FACNnB,UAAQ,KAEP,4BACN,mBAAQiB,KAAK,SAAb,0BACI,SAAC,KAAD,WAMf,EC7DQG,EAAc,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,GAAI3B,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,OAChCS,GAAWC,EAAAA,EAAAA,MACf,OACI,0BAAcX,EAAd,KAAsBC,EAAtB,KAA8B,mBAAQsB,KAAK,SAASK,QAAS,kBAAMlB,GAASmB,EAAAA,EAAAA,IAAcF,GAA7B,EAA/B,sBAArBA,EAEhB,ECLYG,EAAc,WACnB,IAAMrC,GAAWgB,EAAAA,EAAAA,IAAYlB,GACvBwC,GAAiBtB,EAAAA,EAAAA,IAAYZ,GAC7BmC,EAAevC,EAASK,QAAO,SAAAkB,GAAO,OAAIA,EAAQhB,KAAKiC,cAAchB,SAASc,EAAeE,cAAvD,IAEhD,OACI,wBACCD,EAAajB,KAAI,YAA2B,IAAxBY,EAAuB,EAAvBA,GAAI3B,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,OACvB,OACJ,SAACyB,EAAD,CAAsBC,GAAIA,EAAI3B,KAAMA,EAAMC,OAAQA,GAAhC0B,EAEjB,KAGZ,E,UCdYO,EAAS,WACpB,IAAMpC,GAASW,EAAAA,EAAAA,IAAYZ,GACrBa,GAAWC,EAAAA,EAAAA,MAIf,OACI,sDACA,kBAAOY,KAAK,OAAOvB,KAAK,SAASmC,MAAOrC,EAAQsC,SALrC,SAAAC,GACf3B,GAAS4B,EAAAA,EAAAA,GAAUD,EAAME,OAAOJ,OACjC,MAMF,ECPc,SAASK,IACtB,IAAM9B,GAAWC,EAAAA,EAAAA,MACXf,GAAYa,EAAAA,EAAAA,IAAYd,GAM9B,OAJA8C,EAAAA,EAAAA,YAAU,WACR/B,GAASgC,EAAAA,EAAAA,MACV,GAAE,CAAChC,KAGF,iCACE,2CACA,SAACF,EAAD,KACA,SAAC0B,EAAD,KACA,yBAAMtC,GAAa,4BACnB,SAACkC,EAAD,MAGL,C","sources":["redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","pages/Contacts.js"],"sourcesContent":["export const getContacts = state => state.contacts.items;\nexport const getIsLoading = state => state.contacts.isLoading;\nexport const getError = state => state.contacts.error;\nexport const getFilter = state => state.filter;","import React from 'react';\nimport { Formik, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport { Toaster, toast } from 'react-hot-toast';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\n\nconst initialValues = {\n        name: '',\n        number: '',\n}\n    \nconst FormSchema = yup.object().shape({\n  name: yup.string().min(2).required(),\n  number: yup.string().min(7).max(14).required(),\n});\n\n  \nexport const ContactForm = () => {\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const handleSubmit = (values, { resetForm }) => {\n    const isExist = contacts.map(contact => contact.name);\n    \n      if (isExist.includes(values.name)) {\n        alert(`${values.name} is already in contacts`)\n        return\n      }\n    dispatch(addContact(values));\n    toast.success('New contact successfully added');\n    resetForm();\n  }\n    \n    return (\n            <Formik initialValues={initialValues} onSubmit={handleSubmit} validationSchema={FormSchema}>\n            <form>\n                <label htmlFor='name'>Name</label>\n                <ErrorMessage name=\"name\" />\n                    <input\n                     type=\"text\"\n                     name=\"name\"\n                     pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                     title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                     required\n                        />\n                    \n                <label htmlFor='number'>Number</label>\n                <ErrorMessage name=\"number\" />\n                    <input\n                     type=\"tel\"\n                     name=\"number\"\n                     pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                     title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                     required\n                        />\n                      <div> \n                <button type=\"submit\" >Add contact</button>\n                    <Toaster />\n                    </div> \n                </form>\n                </Formik>\n    )\n    \n    }\n\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\n\nexport const ContactItem = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n    return (\n        <li key={id}>{name}: {number} <button type=\"button\" onClick={() => dispatch(deleteContact(id))}>Delete</button></li>\n    )\n}\n\nContactItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n}\n","import { ContactItem } from \"components/ContactItem/ContactItem\";\nimport { useSelector } from 'react-redux';\nimport { getContacts, getFilter } from 'redux/contacts/selectors';\n\nexport const ContactList = () => {\n        const contacts = useSelector(getContacts);\n        const filterContacts = useSelector(getFilter);\n        const contactsList = contacts.filter(contact => contact.name.toLowerCase().includes(filterContacts.toLowerCase()));\n\n    return (\n        <ul>\n        {contactsList.map(({ id, name, number }) => {\n                return (\n            <ContactItem key={id} id={id} name={name} number={number} />\n            )\n            })}\n                </ul>\n    )\n}\n\n","import { useSelector, useDispatch } from 'react-redux';\nimport { getFilter } from 'redux/contacts/selectors';\nimport { setFilter } from 'redux/contacts/filterSlice';\n\nexport const Filter = () => {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n  const onChange = event => {\n    dispatch(setFilter(event.target.value))\n  }\n    return (\n        <label>Find contacts by name\n        <input type=\"text\" name=\"filter\" value={filter} onChange={onChange}/>\n    </label>\n    )\n}\n\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { getIsLoading } from 'redux/contacts/selectors';\nimport { Filter } from 'components/Filter/Filter';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <h1>Your contacts</h1>\n      <ContactForm />\n      <Filter />\n      <div>{isLoading && 'Request in progress...'}</div>\n      <ContactList />\n    </>\n  );\n}"],"names":["getContacts","state","contacts","items","getIsLoading","isLoading","getFilter","filter","initialValues","name","number","FormSchema","yup","shape","min","required","max","ContactForm","useSelector","dispatch","useDispatch","onSubmit","values","resetForm","map","contact","includes","alert","addContact","toast","validationSchema","htmlFor","type","pattern","title","ContactItem","id","onClick","deleteContact","ContactList","filterContacts","contactsList","toLowerCase","Filter","value","onChange","event","setFilter","target","Contacts","useEffect","fetchContacts"],"sourceRoot":""}